// Generated by CoffeeScript 1.9.2
(function() {
  var Promise, api, fs, nodeFs, prompt;

  prompt = require('prompt');

  nodeFs = require('fs');

  Promise = require('promise');

  fs = {
    readFile: Promise.denodeify(nodeFs.readFile.bind(nodeFs)),
    writeFile: Promise.denodeify(nodeFs.writeFile.bind(nodeFs))
  };

  api = {
    "export": function(kernelId) {
      return Promise.resolve("ok");
    },
    unexport: function(kernelId) {
      return Promise.resolve("ok");
    },
    getDirection: function(kernelId) {
      return Promise.resolve("in");
    },
    setDirection: function(kernelId, direction) {
      return Promise.resolve("ok");
    },
    setInputMode: function(kernelId) {
      return this.setDirection(this.getGpioExportedName(kernelId), "in");
    },
    setOutputMode: function(kernelId) {
      return this.setDirection(this.getGpioExportedName(kernelId), "out");
    },
    digitalRead: function(pin) {
      return new Promise(function(fulfill, reject) {
        console.log("pin " + this.getGpioExportedName(pin));
        prompt.start();
        return prompt.get(['gpio_value'], function(err, result) {
          if (err) {
            reject(err);
          }
          return fulfill(result.gpio_value === "1");
        });
      });
    },
    digitalWrite: function(pin, value) {
      return Promise.resolve("ok");
    },
    analogRead: function(pin) {
      return new Promise(function(fulfill, reject) {
        console.log("pin " + pin);
        prompt.start();
        return prompt.get(['adc_value'], function(err, result) {
          if (err) {
            reject(err);
          }
          return fulfill(result.adc_value.toInt());
        });
      });
    },
    getGpioExportedName: function(kernelId) {
      var pinName;
      if (kernelId < 32 || kernelId > 127) {
        throw new Error('kernelId ' + kernelId + ' not allowed');
      }
      pinName = "pio";
      if (kernelId >= 32 && kernelId <= 63) {
        pinName = pinName + 'A' + (kernelId - 32);
      }
      if (kernelId >= 64 && kernelId <= 95) {
        pinName = pinName + 'B' + (kernelId - 64);
      }
      if (kernelId >= 96 && kernelId <= 127) {
        pinName = pinName + 'C' + (kernelId - 96);
      }
      return pinName;
    }
  };

  module.exports = api;

}).call(this);
